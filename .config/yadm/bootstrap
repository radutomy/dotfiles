#!/bin/bash

update_system() {
	apt update && apt upgrade -y
	export GPG_TTY=$(tty)
	tabs 4 # configure the number of tabs the OS displays
	# update wezterm config on Windows
	cp ~/.config/.wezterm.lua /mnt/c/Users/$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
	# create symbolic link if path exists
	if [ -d "/mnt/c/Users/a-rtomuleasa/OneDrive - Microsoft" ]; then ln -s "/mnt/c/Users/a-rtomuleasa/OneDrive - Microsoft" ~/one 2>/dev/null; fi
}

update_yadm() {
	yadm remote set-url origin git@github.com:radutomy/dotfiles.git
}

update_wsl_conf() {
	tee /etc/wsl.conf << 'EOF'
[automount]
options = "metadata,uid=0,gid=0,umask=022,fmask=144"

[boot]
systemd=true

[interop]
appendWindowsPath = true
EOF
}

install_packages() {
	apt remove vim* snap* -y
	apt install wget curl yadm lsb-release libfuse2t64 bash-completion apt-transport-https net-tools jq \
	build-essential git git-delta expect sshpass unzip mosquitto mosquitto-clients expect \
	python3-venv python-is-python3 dotnet-sdk-8.0 -y

	wget https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/powershell_7.5.0-1.deb_amd64.deb
	dpkg -i powershell_7.5.0-1.deb_amd64.deb
	apt install -f
	rm powershell_7.5.0-1.deb_amd64.deb
}

repo_cr() {
	cd ~ || exit
	git clone --branch main https://msr-optics.visualstudio.com/ProjectSilica/_git/ConceptReader && cd ConceptReader
	git config --local user.email "a-rtomuleasa@microsoft.com"
	python -m venv .venv
	.venv/bin/pip install click grpcio grpcio-tools tqdm matplotlib pillow pandas numpy scipy \ 
	scikit-image opencv-python tifffile
	cd ~
}

install_rust() {
	apt install libssl-dev libudev-dev pkg-config build-essential gdb clang -y
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path -y
	$HOME/.cargo/bin/rustup component add rust-analyzer
	$HOME/.cargo/bin/rustup target add aarch64-unknown-linux-musl
	$HOME/.cargo/bin/rustup target add x86_64-pc-windows-gnu
	#$HOME/.cargo/bin/rustup target add armv7-unknown-linux-musleabihf
}

download_msrust() {
    # Check required commands
    command -v curl >/dev/null 2>&1 || {
        echo >&2 "curl is required"
        return 1
    }
    command -v jq >/dev/null 2>&1 || {
        echo >&2 "jq is required"
        return 1
    }
    command -v unzip >/dev/null 2>&1 || {
        echo >&2 "unzip is required"
        return 1
    }

    # Set up authentication
    if [ -z "$MSRUSTUP_ACCESS_TOKEN" ] && [ -z "$MSRUSTUP_PAT" ]; then
        if command -v azureauth.exe >/dev/null 2>&1; then
            MSRUSTUP_ACCESS_TOKEN=$(azureauth.exe ado token)
        else
            echo "MSRUSTUP_ACCESS_TOKEN or MSRUSTUP_PAT must be set or azureauth.exe must be present."
            return 1
        fi
    fi

    local feed_url=${MSRUSTUP_FEED_URL:-'https://mscodehub.pkgs.visualstudio.com/Rust/_packaging/Rust%40Release/nuget/v3/index.json'}
    local package="rust.msrustup-x86_64-unknown-linux-gnu"

    # Function to perform curl with proper authentication
    do_curl() {
        if [ -n "$MSRUSTUP_ACCESS_TOKEN" ]; then
            curl -sSfL -H "Authorization: Bearer $MSRUSTUP_ACCESS_TOKEN" --retry 5 "$@"
        else
            curl -sSfL -u ":$MSRUSTUP_PAT" --retry 5 "$@"
        fi
    }

    # Get package details and download URL
	local response=$(do_curl "$feed_url")
	local base=$(echo "$response" | jq -r '.resources[] | select(."@type"=="PackageBaseAddress/3.0.0") | .["@id"]')
	local version=$(do_curl "$base$package/index.json" | jq -r '.versions[0]')
	local download_url="${base}${package}/$version/$package.$version.nupkg"
	echo "Downloading msrustup $version"
	do_curl "$download_url" -o msrustup.zip
	unzip -jqo msrustup.zip tools/msrustup
	chmod +x msrustup
	rm -f msrustup.zip
}

install_msrust() {
	expect -c 'spawn ./msrustup; expect "press ENTER"; send "\r"; expect "Select Auth Provider"; send "\r"; expect "Press ENTER to exit"; send "\r"; interact'
	rm msrustup
	apt install libssl-dev libudev-dev pkg-config build-essential gdb clang \
	gcc-aarch64-linux-gnu protobuf-compiler -y
	$HOME/.cargo/bin/msrustup target add aarch64-unknown-linux-musl
	#rustup default ms-stable

	export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
	export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_AR=aarch64-linux-gnu-gcc-ar
}

install_helix() {
	add-apt-repository ppa:maveonair/helix-editor -y
	apt install helix -y
}

install_neovim() {
	apt install ripgrep npm -y
	curl -L https://github.com/neovim/neovim/releases/download/stable/nvim.appimage -o /bin/nvim
	chmod +x /bin/nvim
	nvim --headless "+Lazy! sync" +qa
	
	# LazyGit
	LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
	curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
	tar xf lazygit.tar.gz lazygit
	install lazygit /usr/local/bin
	rm lazygit*
}

install_docker() {
	apt install docker.io docker-buildx docker-compose-v2 -y
}

install_fish() {
	apt install fish fzf fd-find bat lsd -y
	# https://github.com/sharkdp/bat/issues/982
	ln -s /usr/bin/batcat /usr/local/bin/bat
	fish -c "curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher update"
	chsh -s $(which fish)
}

install_az() {
	curl -sL https://aka.ms/InstallAzureCLIDeb | bash
}

cleanup() {
	cd ~
	rm .motd_shown
}

update_system
update_yadm
update_wsl_conf
install_packages
repo_cr
install_rust
download_msrust
install_msrust
install_helix
install_neovim
install_docker
install_fish
#install_az
cleanup
